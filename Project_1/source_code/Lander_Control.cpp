/*
 Mod by Per Parker, Sep. 2015 - now with Alien!
*/

/*
  Standard C libraries
*/
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<time.h>

/*
   Headers for OpenGL libraries. If you want to run this
   on your computer, make sure you have installed OpenGL,
   and GLUT
*/
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <GLUT/glut.h>
/** 
  #include <GL/gl.h>
  #include <GL/glu.h>
  #include <GL/glut.h>
 */


#include "Lander_Control.h"

extern unsigned char extra_data[];

// Flight computer variables
int MT_OK;
int RT_OK;
int LT_OK;
double PLAT_X;
double PLAT_Y;
double SONAR_DIST[36];

// OpenGL global data - YOU MUST NOT CHANGE THIS!
int FAIL_MODE;
int MKmode;
int kbuf[6];
double s_sec;
double s_sec2;
int windowID;               // Glut window ID (for display)
int Win[2];                 // window (x,y) size
int F_LIST[10];
int F_comp[10];
double Xhist[HIST];
double Yhist[HIST];
double dXhist[HIST];
double dYhist[HIST];
double Thist[HIST];
double *rst, *pst;
int *fst;
unsigned char *map_a, *map, *map_b, *varis; // image data
unsigned char *tmp;
unsigned char *lander_tp;
char line[1024];
GLuint textures[3];
int mm=0;
int initF=0;
int aFrames=0;

// Function prototypes for code you don't need to look at
// (including OpenGL stuff and utilities)
int main(int argc, char *argv[]);
void load_map(const char *name);
void load_lander(void);
int render_frame(double *st, double *parm, int *flg, double *s_dir, double *s_dst);
void plotHist(int x, int y, int R, int G, int B, unsigned char *map);
double state_update(double *st, double *parm, int *flg, double *s_dir, double *s_dst);
unsigned char *readPPMimage(const char *filename);
void imageOutput(unsigned char *im, const char *filename);
void kbHandler(unsigned char key, int x, int y);
void kbUpHandler(unsigned char key, int x, int y);
void initGlut(char* winName);
void GL_Settings_Init();
void WindowReshape(int w, int h);
void WindowDisplay(void);
void DoNothin(clock_t delay);

/**************************************************
 LANDER CONTROL CODE ENDS HERE.
 YOU CAN IGNORE ALL CODE BELOW THIS POINT.

 DO NOT SPEND TIME ON THE CODE BELOW HERE UNLESS
 YOU:

 a) Have completed your task and have implemented
    control software that works in the face of
    failures.
 b) Have too much time on your hand and want to
    see how I built this thing...

 Evidently, you should only spend time on the code
 below this point if (a AND b)
**************************************************/

/**************************************************
 Setup, image management, and OpenGL stuff
 DO NOT alter any of the code below!
 You do not need to change the code below to
 solve this problem. However, if you're curious
 you may learn a few tricks...
***************************************************/
int main(int argc, char *argv[])
{
 /*
   Main function. Read command line parameters and
   set up simulation parameters accordingly
 */
 int tpx;
 unsigned char *lander;

 srand48(time(NULL));
 memset(&Xhist[0],0,HIST*sizeof(double));
 memset(&Yhist[0],0,HIST*sizeof(double));
 memset(&dXhist[0],0,HIST*sizeof(double));
 memset(&dYhist[0],0,HIST*sizeof(double));
 memset(&Thist[0],0,HIST*sizeof(double));

 if (argc<3)
 {
  fprintf(stderr,"Usage: Lander_Control MapName FailMode [component1] [component2] ... [component n]\n");
  fprintf(stderr,"See header of Lander_Control.cpp for details\n");
  exit(1);
 }

 for (int i=0;i<10;i++){F_LIST[i]=1;F_comp[i]=1;}
 s_sec=-1;
 s_sec2=-1;
 FAIL_MODE=atoi(argv[2]);
 if (FAIL_MODE==3)
 {
  for (int i=3; i<argc; i++)
   if (atoi(argv[i])>0&&atoi(argv[i])<10) F_comp[atoi(argv[i])]=0;
  s_sec=.5;
 }
 else if (FAIL_MODE==1||FAIL_MODE==2)
 {
  s_sec=4*drand48();
  s_sec2=8*drand48();
 }
 else FAIL_MODE=0;

 map=readPPMimage(argv[1]);
 if (map==NULL)
 {
  fprintf(stderr,"Unable to open map image %s, please check name and path\n",argv[1]);
  exit(1);
 }
 map_b=(unsigned char *)calloc(1024*1024*3,sizeof(unsigned char));
 if (!map_b)
 {
  fprintf(stderr,"Unable to allocate image data\n");
  free(map);
  exit(1);
 }
 memcpy(map_b,map,1024*1024*3*sizeof(unsigned char));

 map_a=(unsigned char *)calloc(1024*1024*3,sizeof(unsigned char));
 if (!map_a)
 {
  fprintf(stderr,"Unable to allocate image data\n");
  free(map);
  free(map_b);
  exit(1);
 }
 memcpy(map_a,map,1024*1024*3*sizeof(unsigned char));

 lander=readPPMimage("lander.ppm");
 if (lander==NULL)
 {
   fprintf(stderr,"Unable to load lander image. Ensure it is in the same directory\n");
   free(map);
   free(map_b);
   free(map_a);
   exit(1);
 }

 varis=readPPMimage("varis.ppm");
 if (varis==NULL)
 {
  fprintf(stderr,"Unable to load variable labels.\n");
  free(map);
  free(map_b);
  free(map_a);
  free(lander);
  exit(0);
 }

 lander_tp = (unsigned char *)calloc(64*64*4, sizeof(unsigned char));
 for (int i = 0; i < 64*64; i++) {
   lander_tp[i*4 + 0] = lander[i*3 + 0];
   lander_tp[i*4 + 1] = lander[i*3 + 1];
   lander_tp[i*4 + 2] = lander[i*3 + 2];
   if (lander[i*3 + 0] || lander[i*3 + 1] || lander[i*3 + 2])
     lander_tp[i*4 + 3] = 255;
   else
     lander_tp[i*4 + 3] = 0;
 }
 free(lander);

 tpx=0;
 PLAT_X=0;
 PLAT_Y=0;
 for (int i=0; i<1024; i++)
  for (int j=0; j<1024; j++)
  {
   if (*(map+((i+(j*1024))*3)+0)>250&&*(map+((i+(j*1024))*3)+1)<10&&*(map+((i+(j*1024))*3)+2)<10)
   {
    PLAT_X+=i;
    PLAT_Y+=j;
    tpx++;
   }
  }
 PLAT_X/=tpx;
 PLAT_Y/=tpx;
 mm=0;

 // Initialize glut, glui, and opengl
 Win[0]=700;
 Win[1]=700;
 glutInit(&argc, argv);
 initGlut(argv[0]);

 MKmode=0;
 memset(&kbuf[0],0,6*sizeof(int));
 glutMainLoop();
 exit(0);
}

double state_update(double *st, double *parm, int *flg, double *s_dir, double *s_dst)
{
 /*
   Lander state update. Accounts for all forces acting on the lander,
   commands from the control software, and so on.
 */

 static double SimTime=0;
 static double PingTime=0;
 double dice;
 double hang;
 
 if (SimTime==0)
 {
  // Init
  *(st+0)=50+(drand48()*925);
  *(st+1)=50+(drand48()*50);
  *(st+2)=(drand48()*25)-12.5;
  *(st+3)=-(drand48()*15);
  *(st+4)=(drand48()*2.0*PI);
  *(st+5)=0;
  *(st+6)=0;
  memset(parm,0,10*sizeof(double));
  for (int i=0; i<10; i++) *(flg+i)=F_LIST[i];
  for (int i=0; i<36; i++)
  {
   *(s_dir+i)=1;
   *(s_dst+i)=15;
   SONAR_DIST[i]=-1;
  }
  MT_OK=*(flg+1);
  LT_OK=*(flg+2);
  RT_OK=*(flg+3);

  st[10] = 50 + (drand48() * 925);
  st[11] = 800 + (drand48() * 200);
  st[12] = st[13] = 0;
 }

 if (*(parm+9)!=0)
 {
  if (*(parm+9)>0)
  {
   *(st+4)+=fmin(*(parm+9),MAX_ROT_RATE);
   *(parm+9)-=fmin(*(parm+9),MAX_ROT_RATE);
  }
  else
  {
   *(st+4)-=fmin(fabs(*(parm+9)),MAX_ROT_RATE);
   *(parm+9)+=fmin(fabs(*(parm+9)),MAX_ROT_RATE);
  }
 }
 if (*(st+4)<0) *(st+4)=(2.0*PI)+(*(st+4));
 *(st+4)=fmod(*(st+4),2.0*PI);

 *(st+6)=-G_ACCEL;
 *(st+5)=0;
 if (*(parm+1)>0&&*(flg+1)==1)
 {
  *(st+6)+=cos(*(st+4))*MT_ACCEL*(*(parm+1));
  *(st+5)+=sin(*(st+4))*MT_ACCEL*(*(parm+1));
 }
 if (*(parm+2)>0&&*(flg+2)==1)
 {
  hang=-PI+(*(st+4));   		// -PI to PI
  *(st+6)+=sin(hang)*LT_ACCEL*(*(parm+2));
  *(st+5)-=cos(hang)*LT_ACCEL*(*(parm+2));
 }
 if (*(parm+3)>0&&*(flg+3)==1)
 {
  hang=2.0*PI-(*(st+4));               // 0 to 2PI
  *(st+6)-=sin(hang)*RT_ACCEL*(*(parm+3));
  *(st+5)-=cos(hang)*RT_ACCEL*(*(parm+3));
 }

 *(st+2)+=T_STEP*(*(st+5));
 *(st+3)+=T_STEP*(*(st+6));
 *(st+0)+=S_SCALE*T_STEP*(*(st+2));
 *(st+1)-=S_SCALE*T_STEP*(*(st+3));

 for (int i=0; i<36; i++){*(s_dst+i)+=(*(s_dir+i))*SONAR_RANGE; if (*(s_dst+i)<0) *(s_dst+i)=0;}

 SimTime+=T_STEP;
 PingTime+=T_STEP;

 if (PingTime>.25)
 {
  PingTime=0;
  for (int i=0; i<36; i++)
  {
   if (*(s_dir+i)==1) SONAR_DIST[i]=-1;
   *(s_dir+i)=1;
   *(s_dst+i)=15;
  }
 }

 // Check for failures
 if (FAIL_MODE==1||FAIL_MODE==2||FAIL_MODE==3)
 {
  dice=drand48();
  if ((s_sec>0&&s_sec<SimTime)||(s_sec2>0&&s_sec2<SimTime))
  {
   if (FAIL_MODE==1)
   {
    if (dice<.5) {*(flg+1)=0; MT_OK=0; fprintf(stderr,"Main Thruster malfunction!\n");}
    else if (dice<.75) {*(flg+2)=0; LT_OK=0; fprintf(stderr,"Left Thruster malfunction!\n");}
    else {*(flg+3)=0; RT_OK=0; fprintf(stderr,"Right Thruster malfunction!\n");}
   }
   else if (FAIL_MODE==3)
   {
    for (int i=0; i<10; i++)
    {
     *(flg+i)=F_comp[i];
     if (F_comp[i]==0) fprintf(stderr,"Failing component %d\n",i);
    }
    if (F_comp[1]==0) MT_OK=0;
    if (F_comp[2]==0) LT_OK=0;
    if (F_comp[3]==0) RT_OK=0;
   }
   else
   {
    if (dice==1) dice=.999;
    *(flg+1+(int)(dice*8))=0;
    switch ((int)((dice*8)+1))
    {
     case 1:
      fprintf(stderr,"Main Thruster malfunction\n");
      MT_OK=0;
      break;
     case 2:
      fprintf(stderr,"Left Thruster malfunction\n");
      LT_OK=0;
      break;
     case 3:
      fprintf(stderr,"Right Thruster malfunction\n");
      RT_OK=0;
      break;
     case 4:
      fprintf(stderr,"Horizontal Velocity sensor malfunction\n");
      break;
     case 5:
      fprintf(stderr,"Vertical Velocity sensor malfunction\n");
      break;
     case 6:
      fprintf(stderr,"Horizontal Position sensor malfunction\n");
      break;
     case 7:
      fprintf(stderr,"Vertical Position sensor malfunction\n");
      break;
     case 8:
      fprintf(stderr,"Angle sensor malfunction\n");
      break;
     case 9:
      fprintf(stderr,"Sonar malfunction\n");
      break;
     default:
      fprintf(stderr,"Something just went wrong!\n");
      break;
    }
   }
   if (s_sec>0) s_sec=-1; else s_sec2=-1;
  }
 }

 if (mm==1 && initF>aFrames)
 {
  double dx[2];
  dx[0] = st[0] - st[10];
  dx[1] = st[1] - st[11];
  double norm = sqrt(dx[0]*dx[0] + dx[1]*dx[1]);
  st[12] += 400.0 * T_STEP * dx[0] / norm;
  st[13] += 400.0 * T_STEP * dx[1] / norm;
  norm = sqrt(st[12]*st[12] + st[13]*st[13]);
  if (norm > 350.0) {
   st[12] *= 350.0/norm;
   st[13] *= 350.0/norm;
  }
  st[10] += T_STEP * st[12];
  st[11] += T_STEP * st[13];
 }
 else if (mm==0)
 {
  time_t t;
  time(&t);
  struct tm *lt = localtime(&t);
  if (lt->tm_hour < 3)
   if (drand48()<.1) mm = 1;
   else mm=-1;
 }

 return(SimTime*100);
}

void plotHist(int x, int y, int R, int G, int B, unsigned char *map, double *hist, double ref)
{
 /*
   Make a simple plot of the historical data for some variable in the simulation
   starting at (x,y) with the specified colour.
 */

 int i,j,xc,yc;
 double ydisp;
 int widthScale=1;
 int heightScale=30;

 for (i=0;i<HIST*widthScale;i++)
 {
  *(map+((x+i+((y-heightScale)*1024))*3)+0)=127;
  *(map+((x+i+((y-heightScale)*1024))*3)+1)=127;
  *(map+((x+i+((y-heightScale)*1024))*3)+2)=127;
  *(map+((x+i+((y+heightScale)*1024))*3)+0)=127;
  *(map+((x+i+((y+heightScale)*1024))*3)+1)=127;
  *(map+((x+i+((y+heightScale)*1024))*3)+2)=127;
  *(map+((x+i+(y*1024))*3)+0)=127;
  *(map+((x+i+(y*1024))*3)+1)=0;
  *(map+((x+i+(y*1024))*3)+2)=0;
 }
 for (i=-heightScale;i<=heightScale;i++)
 {
  *(map+((x+(HIST*widthScale)+((y+i)*1024))*3)+0)=127;
  *(map+((x+(HIST*widthScale)+((y+i)*1024))*3)+1)=127;
  *(map+((x+(HIST*widthScale)+((y+i)*1024))*3)+2)=127;
  *(map+((x+((y+i)*1024))*3)+0)=127;
  *(map+((x+((y+i)*1024))*3)+1)=127;
  *(map+((x+((y+i)*1024))*3)+2)=127;
 }

 for (i=0; i<HIST; i++)
 {
  ydisp=((*(hist+i))-ref);
  if (ydisp<-.99) ydisp=-.99;
  else if (ydisp>.99) ydisp=.99;

  yc=y+(int)(-ydisp*heightScale);
  for (j=0; j<widthScale; j++)
  {
   xc=x+(i*widthScale)+j;
   if (yc>=0&&yc<1024&&xc>=0&&xc<1024)
   {
    *(map+((xc+(yc*1024))*3)+0)=(unsigned char)R;
    *(map+((xc+(yc*1024))*3)+1)=(unsigned char)G;
    *(map+((xc+(yc*1024))*3)+2)=(unsigned char)B;
   }
  }
 }

}

int render_frame(double *st, double *parm, int *flg, double *s_dir, double *s_dst)
{
 /*
   Update the image for display
 */
 int xp,yp;
 double vx,vy;
 int xc,yc;
 int col,bnc,Elvis;
 int nCC;
 static int brsign=0;
 static double bright=0;

 memcpy(map_a,map,1024*1024*3*sizeof(unsigned char));
 // BG update
 if (mm==1 && initF>aFrames)
 {
  for (int iii=0; iii<42; iii++)
   for (int jjj=0; jjj<35; jjj++)
   {
    xc=st[10]-42+(2*iii);
    yc=st[11]+35-(2*jjj);
    if (xc>=0&&xc<1023&&yc>=0&&yc<1023)
    {
     int R,G,B;
     if (*(extra_data+138+(4*(iii+(jjj*42)))+0)>55 || *(extra_data+138+(4*(iii+(jjj*42)))+1)>55 || *(extra_data+138+(4*(iii+(jjj*42)))+2)>55)
     {
      R=(int)(*(map_b+(3*(xc+(yc*1024)))+0)*.20)+(*(extra_data+138+(4*(iii+(jjj*42)))+0)*.80);
      G=(int)(*(map_b+(3*(xc+(yc*1024)))+1)*.20)+(*(extra_data+138+(4*(iii+(jjj*42)))+1)*.80);
      B=(int)(*(map_b+(3*(xc+(yc*1024)))+2)*.20)+(*(extra_data+138+(4*(iii+(jjj*42)))+2)*.80);
      if (R>G && R>B)
      {
       B=B*bright;
       R=R*bright;
       G=G*bright;
       if (B>255) B=255;
       if (R>255) R=255;
       if (G>255) G=255;       
       if (brsign==0)
       {
        bright+=.0005;  
        if (bright>=2.0) brsign=1;
       }
       else
       {
        bright-=.0005;
        if (bright<=0) brsign=0;
       }
      }
      *(map_a+(3*(xc+(yc*1024)))+0)=(unsigned char)B;
      *(map_a+(3*(xc+(yc*1024)))+1)=(unsigned char)G;
      *(map_a+(3*(xc+(yc*1024)))+2)=(unsigned char)R;
      *(map_a+(3*(xc+1+(yc*1024)))+0)=(unsigned char)B;
      *(map_a+(3*(xc+1+(yc*1024)))+1)=(unsigned char)G;
      *(map_a+(3*(xc+1+(yc*1024)))+2)=(unsigned char)R;
      *(map_a+(3*(xc+1+((yc+1)*1024)))+0)=(unsigned char)B;
      *(map_a+(3*(xc+1+((yc+1)*1024)))+1)=(unsigned char)G;
      *(map_a+(3*(xc+1+((yc+1)*1024)))+2)=(unsigned char)R;
      *(map_a+(3*(xc+((yc+1)*1024)))+0)=(unsigned char)B;
      *(map_a+(3*(xc+((yc+1)*1024)))+1)=(unsigned char)G;
      *(map_a+(3*(xc+((yc+1)*1024)))+2)=(unsigned char)R;
     }
    }    
   }
 }
 memcpy(map_b,map_a,1024*1024*3*sizeof(unsigned char));

 // Update history data
 for (int i=0; i<HIST-1; i++)
 {
  Xhist[i]=Xhist[i+1];
  Yhist[i]=Yhist[i+1];
  dXhist[i]=dXhist[i+1];
  dYhist[i]=dYhist[i+1];
  Thist[i]=Thist[i+1];
 }
 Xhist[HIST-1]=Position_X()/512.0;
 Yhist[HIST-1]=Position_Y()/512.0;
 dXhist[HIST-1]=Velocity_X()/25.0;
 dYhist[HIST-1]=Velocity_Y()/25.0;
 Thist[HIST-1]=(Angle()/360.0)-.5;

 // Collision check
 Elvis=1;
 col=0;
 nCC=0;
 for (int i=0; i<64; i++)
  for (int j=0; j<64; j++)
  {
   xp=((int)*(st+0))+i-32;
   yp=((int)*(st+1))+j-32;
   if (xp>=0&&yp>=0&&xp<1024&&yp<1024)
   {
    Elvis=0;
    if (*(lander_tp+((i+(64*j))*4)+0)>0)
    {
     if (*(map+((xp+(yp*1024))*3)+0)==255&&*(map+((xp+(yp*1024))*3)+1)==0&&*(map+((xp+(yp*1024))*3)+2)==0)
     {
      if (((fabs(*(st+4))<15.0*(PI/180))||(*(st+4)>345*(PI/180)))&&fabs(*(st+3))<10.0) col=2; else nCC++;
     }
     else if (*(map+((xp+(yp*1024))*3)+0)>0) nCC++;
    }
   }
  }
 if (nCC>10) col=1;
 if (Elvis) col=3;
 
 if (mm==1 && initF>aFrames)
 {
  double dx[2];
  dx[0] = st[0] - st[10];
  dx[1] = st[1] - st[11];
  double dist = sqrt(dx[0]*dx[0] + dx[1]*dx[1]);
  if (dist < 30.0)
   col = 1;
 }
 // Render effects below the lander
 // Sonar ping / echo

 // Render range finder line
 vy=cos(*(rst+4));
 vx=-sin(*(rst+4));
 for (int i=19; i<1024; i++)
 {
  xp=round((*(rst+0))+(vx*i));
  yp=round((*(rst+1))+(vy*i));
  if (xp>=0&&xp<1024&&yp>=0&&yp<1024)
  {
   if (*(map+((xp+(yp*1024))*3)+0)>5) break;
   *(map_b+((xp+(yp*1024))*3)+0)=(unsigned char)255;
  }
 }

 if (*(flg+9))
 {
  for (int i=0;i<36; i+=1)
  {
   xp=((int)*(st+0));
   yp=((int)*(st+1));
   vy=-cos(i*20.0*PI/360.0);
   vx=sin(i*20.0*PI/360.0);
   xp=round(xp+((*(s_dst+i))*vx));
   yp=round(yp+((*(s_dst+i))*vy));
   vx=-vy;
   vy=sin(i*20.0*PI/360.0);
   bnc=0;
   for (int j=1; j<*(s_dst+i)/10.0; j++)
   {
    xc=round(xp+(j*vx));
    yc=round(yp+(j*vy));
    if (xc>=0&&xc<1024&&yc>=0&&yc<1024)
    {
     if (*(map_a+((xc+(yc*1024))*3)+0)!=0||*(map_a+((xc+(yc*1024))*3)+1)!=0||*(map_a+((xc+(yc*1024))*3)+2)!=0) bnc=1;
     *(map_b+((xc+(yc*1024))*3)+0)=(unsigned char)(0.0);
     *(map_b+((xc+(yc*1024))*3)+1)=(unsigned char)(255.0-fmin(255.0,(*(s_dst+i))));
     *(map_b+((xc+(yc*1024))*3)+2)=(unsigned char)(255.0-fmin(255.0,(*(s_dst+i))));
    }
    xc=round(xp-(j*vx));
    yc=round(yp-(j*vy));
    if (xc>=0&&xc<1024&&yc>=0&&yc<1024)
    {
     if (*(map_a+((xc+(yc*1024))*3)+0)!=0||*(map_a+((xc+(yc*1024))*3)+1)!=0||*(map_a+((xc+(yc*1024))*3)+2)!=0) bnc=1;
     *(map_b+((xc+(yc*1024))*3)+0)=(unsigned char)(0.0);
     *(map_b+((xc+(yc*1024))*3)+1)=(unsigned char)(255.0-fmin(255.0,(*(s_dst+i))));
     *(map_b+((xc+(yc*1024))*3)+2)=(unsigned char)(255.0-fmin(255.0,(*(s_dst+i))));
    }
   }
   if (bnc==1)
   {
    if (*(s_dir+i)!=-1)
    {
     SONAR_DIST[i]=*(s_dst+i)+((drand48()*(*(s_dst+i)))-(*(s_dst+i)/2));
     (*(s_dir+i)=-1);
    }
   }
  }

 } // end if (*(flg+9))

 // Overlay variable names
 for (int i=0; i<770; i++)
  for (int j=0; j<23; j++)
  {
   xp=i+17;
   yp=j+7;
   *(map_b+((xp+(yp*1024))*3)+0)=*(varis+((i+(j*770))*3)+0);
   *(map_b+((xp+(yp*1024))*3)+1)=*(varis+((i+(j*770))*3)+1);
   *(map_b+((xp+(yp*1024))*3)+2)=*(varis+((i+(j*770))*3)+2);
  }

 // The fires of creation
 if (*(parm+1)>0&&(*(flg+1)))
 {
  for (double i=*(st+4)+PI-(PI/16.0);i<*(st+4)+PI+(PI/16.0);i+=.001)
  {
   xp=((int)*(st+0));
   yp=((int)*(st+1));
   vy=-cos(i);
   vx=sin(i);
   for (int j=15;j<15+(int)(drand48()*75*(*(parm+1)));j++)
   {
    xc=round(xp+(j*vx));
    yc=round(yp+(j*vy));
    if (xc>=0&&xc<1024&&yc>=0&&yc<1024)
    {
     *(map_b+((xc+(yc*1024))*3)+0)=(unsigned char)200+(unsigned char)(drand48()*50);
     *(map_b+((xc+(yc*1024))*3)+1)=(unsigned char)(drand48()*250);
     *(map_b+((xc+(yc*1024))*3)+2)=0;
    }
   }
  }
 }
 if (*(parm+2)>0&&(*(flg+2)))
 {
  for (double i=*(st+4)+(1.5*PI)-(PI/32.0);i<*(st+4)+(1.5*PI)+(PI/32.0);i+=.001)
  {
   xp=((int)*(st+0));
   yp=((int)*(st+1));
   vy=-cos(i);
   vx=sin(i);
   for (int j=20;j<20+(int)(drand48()*55*(*(parm+2)));j++)
   {
    xc=round(xp+(j*vx));
    yc=round(yp+(j*vy));
    if (xc>=0&&xc<1024&&yc>=0&&yc<1024)
    {
     *(map_b+((xc+(yc*1024))*3)+0)=(unsigned char)200+(unsigned char)(drand48()*50);
     *(map_b+((xc+(yc*1024))*3)+1)=(unsigned char)(drand48()*250);
     *(map_b+((xc+(yc*1024))*3)+2)=0;
    }
   }
  }
 }
 if (*(parm+3)>0&&(*(flg+3)))
 {
  for (double i=*(st+4)+(.5*PI)-(PI/32.0);i<*(st+4)+(.5*PI)+(PI/32.0);i+=.001)
  {
   xp=((int)*(st+0));
   yp=((int)*(st+1));
   vy=-cos(i);
   vx=sin(i);
   for (int j=20;j<20+(int)(drand48()*55*(*(parm+3)));j++)
   {
    xc=round(xp+(j*vx));
    yc=round(yp+(j*vy));
    if (xc>=0&&xc<1024&&yc>=0&&yc<1024)
    {
     *(map_b+((xc+(yc*1024))*3)+0)=(unsigned char)200+(unsigned char)(drand48()*50);
     *(map_b+((xc+(yc*1024))*3)+1)=(unsigned char)(drand48()*250);
     *(map_b+((xc+(yc*1024))*3)+2)=0;
    }
   }
  }
 }

 // Plot readouts from vehicle parameters
 plotHist(15,35,0,255,0,map_b,&Xhist[0],1.0);
 plotHist(200,35,0,255,255,map_b,&Yhist[0],1.0);
 plotHist(385,35,255,0,255,map_b,&dXhist[0],0.0);
 plotHist(570,35,255,255,0,map_b,&dYhist[0],0.0);
 plotHist(755,35,128,128,255,map_b,&Thist[0],0.0);

 return(col);
}

void Main_Thruster(double power)
{
 if (power<0) power=0;
 if (power>1) power=1;
 *(pst+1)=(.95*power)+(.05*drand48());
}

void Left_Thruster(double power)
{
 if (power<0) power=0;
 if (power>1) power=1;
 *(pst+2)=(.95*power)+(.05*drand48());
}

void Right_Thruster(double power)
{
 if (power<0) power=0;
 if (power>1) power=1;
 *(pst+3)=(.95*power)+(.05*drand48());
}

void Rotate(double angle)
{
 *(pst+9)=(((.95*angle)+(.05*drand48()))*(PI/180.0));
}

double Velocity_X(void)
{
 if (*(fst+4)) return(*(rst+2)+(NP1*(drand48()-.5)*(*(rst+2))));
 else return((50*drand48())-25);
}

double Velocity_Y(void)
{
 if (*(fst+5)) return(*(rst+3)+(NP1*(drand48()-.5)*(*(rst+3))));
 else return((50*drand48())-25);
}

double Position_X(void)
{
 if (*(fst+6)) return(*(rst+0)+((drand48()-.5)*NP1*(*(rst+0))));
 else return(1024*drand48());
}

double Position_Y(void)
{
 if (*(fst+7)) return(*(rst+1)+((drand48()-.5)*NP1*(*(rst+0))));
 else return(1024*drand48());
}

double Angle(void)
{
 if (*(fst+8)) return((*(rst+4)+((NP2*drand48())-(NP2/2.0)))*(180.0/PI));
 else return((*(rst+4)+((50*NP2*drand48())-(50*NP2/2.0)))*(180.0/PI));
}

double RangeDist(void)
{
 double vx,vy;
 int xp,yp;
 vy=cos(*(rst+4));
 vx=-sin(*(rst+4));

 for (int i=0; i<1024; i++)
 {
  xp=round((*(rst+0))+(vx*i));
  yp=round((*(rst+1))+(vy*i));
  if (xp>=0&&xp<1024&&yp>=0&&yp<1024)
  {
   if (*(map+((xp+(yp*1024))*3)+0)>5) return(i-19);
  }
 }
 return(-1);

}

unsigned char *readPPMimage(const char *filename)
{
 // Reads an image from a .ppm file. A .ppm file is a very simple image representation
 // format with a text header followed by the binary RGB data at 24bits per pixel.
 // The header has the following form:
 //
 // P6
 // # Optionally, one or more comment lines preceded by '#'
 // 340 200
 // 255
 //
 // The first line 'P6' is the .ppm format identifier, this is followed by one or more
 // lines with comments, typically used to inidicate which program generated the
 // .ppm file.
 // After the comments, a line with two integer values specifies the image resolution
 // as number of pixels in x and number of pixels in y.
 // The final line of the header stores the maximum value for pixels in the image,
 // usually 255.
 // After this last header line, binary data stores the RGB values for each pixel
 // in row-major order. Each pixel requires 3 bytes ordered R, G, and B.
 //
 // NOTE: Windows file handling is rather crotchetty. You may have to change the
 //       way this file is accessed if the images are being corrupted on read
 //       on Windows.
 //
 // readPPMdata converts the image colour information to floating point. This is so that
 // the texture mapping function doesn't have to do the conversion every time
 // it is asked to return the colour at a specific location.
 //
 // On error, the function returns NULL
 //

 FILE *f;
 unsigned char *im;
 int sizx,sizy;
 size_t data_sz;

 f=fopen(filename,"rb+");
 if (f==NULL)
 {
  fprintf(stderr,"Unable to open file %s for reading, please check name and path\n",filename);
  return(NULL);
 }
 if (!fgets(&line[0],1000,f))
 {
  fprintf(stderr, "Failed to read .ppm header from %s\n", filename);
  fclose(f);
  return NULL;
 }
 if (strcmp(&line[0],"P6\n")!=0)
 {
  fprintf(stderr,"Wrong file format, not a .ppm file or header end-of-line characters missing\n");
  fclose(f);
  return NULL;
 }

 // Skip over comments
 if (!fgets(&line[0],511,f))
 {
  fprintf(stderr, "Failed to read header from .ppm file %s\n", filename);
  fclose(f);
  return NULL;
 }
 while (line[0]=='#')
 {
  if (!fgets(&line[0],511,f))
  {
   fprintf(stderr, "Failed to read header from .ppm file %s\n", filename);
   fclose(f);
   return NULL;
  }
 }
 sscanf(&line[0],"%d %d\n",&sizx,&sizy);           // Read file size

 if (!fgets(&line[0],9,f)) // Read the remaining header line
 {
  fprintf(stderr, "Failed to read header from .ppm file %s\n", filename);
  fclose(f);
  return NULL;
 }
 im=(unsigned char *)calloc(sizx*sizy*3,sizeof(unsigned char));
 if (im==NULL)
 {
  fprintf(stderr,"Out of memory allocating space for image\n");
  fclose(f);
  return NULL;
 }

 data_sz = sizx * sizy * 3 * sizeof(unsigned char);
 if (fread(im,1,data_sz,f) != data_sz)
 {
  free(im);
  im = NULL;
  fprintf(stderr, "Failed to read data from .ppm file %s\n", filename);
 }

 fclose(f);
 return im;
}

// Initialize glut and create a window with the specified caption
void initGlut(char* winName)
{
    // Set video mode: double-buffered, color, depth-buffered
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

    // Create window
    glutInitWindowPosition (5, 5);
    glutInitWindowSize(Win[0],Win[1]);
    windowID = glutCreateWindow(winName);

    // Setup callback functions to handle window-related events.
    // In particular, OpenGL has to be informed of which functions
    // to call when the image needs to be refreshed, and when the
    // image window is being resized.
    glutReshapeFunc(WindowReshape);   // Call WindowReshape whenever window resized
    glutDisplayFunc(WindowDisplay);   // Call WindowDisplay whenever new frame needed
    glutKeyboardFunc(kbHandler);
    glutKeyboardUpFunc(kbUpHandler);
}

void WindowReshape(int w, int h)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();			// Initialize with identity matrix
    gluOrtho2D(0, 800, 800, 0);
    glViewport(0,0,w,h);
    Win[0] = w;
    Win[1] = h;
}

void kbHandler(unsigned char key, int x, int y)
{
// MKmode=1;
 if (MKmode && key=='a') {kbuf[0]=1; Left_Thruster(1.0);}
 if (MKmode && key=='s') {kbuf[1]=1; Right_Thruster(1.0);}
 if (MKmode && key=='k') {kbuf[2]=1; Rotate(-5.0);}
 if (MKmode && key=='l') {kbuf[3]=1; Rotate(5.0);}
 if (MKmode && key==' ') {kbuf[4]=1; Main_Thruster(1.0);}
 if (key=='z') {kbuf[5]=1; MKmode=1;}
 if (key=='m')
 {
  if (glutGetModifiers() == GLUT_ACTIVE_ALT) mm=1;
 }
 if (key=='q') 
 {
  free(map);
  free(map_b);
  free(map_a);
  free(lander_tp);
  free(varis);
  exit(0);
 }
}

void kbUpHandler(unsigned char key, int x, int y)
{
 if (key=='a') {kbuf[0]=0; Left_Thruster(0.0);}
 if (key=='s') {kbuf[1]=0; Right_Thruster(0.0);}
 if (key=='k') {kbuf[2]=0; Rotate(0.0);}
 if (key=='l') {kbuf[3]=0; Rotate(0.0);}
 if (key==' ') {kbuf[4]=0; Main_Thruster(0.0);}
 if (key=='z') {kbuf[5]=0; MKmode=0;}
 if (kbuf[0]==0&&kbuf[1]==0&&kbuf[2]==0&&kbuf[3]==0&&kbuf[4]==0&&kbuf[5]==0) MKmode=0;
}

void WindowDisplay(void)
{
  static int flg[10];
  static double parm[10];
  static double st[14];
  static double s_dir[36];
  static double s_dst[36];
  static int LStat=0;
  static int frameno=1;
  int xp,yp;
  unsigned char *tmp;

  rst=&st[0];
  fst=&flg[0];
  pst=&parm[0];

  // Main simulation loop while no collision, landing, or lander leaving the screen
   if (LStat==0)
   {
    state_update(st,parm,flg,s_dir,s_dst);
    if (!MKmode) Lander_Control();
    Safety_Override();
    LStat=render_frame(st,parm,flg,s_dir,s_dst);
   }
   else if (LStat==1)		// Lander crashed
   {
    if (frameno>=50)
    {
     fprintf(stderr,"The Lander Has Crashed!\n");
     free(map);
     free(map_b);
     free(map_a);
     free(lander_tp);
     free(varis);
     exit(0);
    }
    else
    {
     memcpy(map_b,map,1024*1024*3*sizeof(unsigned char));
     sprintf(&line[0],"toasted_%04d.ppm",frameno);
     tmp=readPPMimage(line);
     if (tmp!=NULL)
     {
      for (int i=0; i<64; i++)
       for (int j=0; j<64; j++)
       {
        xp=((int)*(st+0))+i-32;
        yp=((int)*(st+1))+j-32;
        if (xp>=0&&yp>=0&&xp<1024&&yp<1024)
        {
         if (*(tmp+((i+(64*j))*3)+0)>5&&*(map+((xp+(yp*1024))*3)+0)<5)
         {
          *(map_b+((xp+(yp*1024))*3)+0)=*(tmp+((i+(j*64))*3)+0);
          *(map_b+((xp+(yp*1024))*3)+1)=*(tmp+((i+(j*64))*3)+1);
          *(map_b+((xp+(yp*1024))*3)+2)=*(tmp+((i+(j*64))*3)+2);
         }
        }
       }
      free(tmp);
     }
     frameno++;
    }
   }
   else if (LStat==2)		// Landing occurred
   {
    if (frameno>=50)
    {
     fprintf(stderr,"We have landing!\n");
     free(map);
     free(map_b);
     free(map_a);
     free(lander_tp);
     free(varis);
     exit(0);
    }
    else
    {
     memcpy(map_b,map,1024*1024*3*sizeof(unsigned char));
     for (int i=0; i<1024; i++)
      for (int j=0; j<1024; j++)
      {
       xp=i;
       yp=j;
       if (*(map+((xp+(yp*1024))*3)+0)==255&&*(map+((xp+(yp*1024))*3)+1)==0&&*(map+((xp+(yp*1024))*3)+2)==0)
       {
        if (frameno%2)
        {
         *(map_b+((xp+(yp*1024))*3)+0)=0;
         *(map_b+((xp+(yp*1024))*3)+1)=55;
         *(map_b+((xp+(yp*1024))*3)+2)=255;
        }
        else
        {
         *(map_b+((xp+(yp*1024))*3)+0)=255;
         *(map_b+((xp+(yp*1024))*3)+1)=255;
         *(map_b+((xp+(yp*1024))*3)+2)=255;
        }
       }
      }
     frameno++;
    }
   }
   else			// Lander left the screen
   {
    fprintf(stderr,"Elvis has left the building!\n");
    free(map);
    free(map_b);
    free(map_a);
    free(lander_tp);
    free(varis);
    exit(0);
   }

  // Clear the screen and depth buffers
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  glEnable(GL_TEXTURE_2D);
  glDisable(GL_LIGHTING);
  glEnable(GL_BLEND);
  glBlendFunc(GL_ONE, GL_ONE);

  if (initF==0)
  {
   aFrames=222+(int)(550*drand48());
   glGenTextures( 3, textures);
   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

   // Shuttle texture
   glBindTexture( GL_TEXTURE_2D, textures[1]);

   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

   //glTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);

   glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, 64, 64, 0, GL_RGBA, GL_UNSIGNED_BYTE, lander_tp);

   glBindTexture( GL_TEXTURE_2D, textures[2]);

   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

   //glTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);

   for (int iii=138,ttt=0; iii<42*35*4; iii+=4)
   {
    ttt=*(extra_data+iii+0);
    *(extra_data+iii+0)=*(extra_data+iii+1);
    *(extra_data+iii+1)=ttt;
   }
   glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, 42, 35, 0, GL_BGRA, GL_UNSIGNED_BYTE, (unsigned char *)(extra_data + 138));

   // Map texture
   glBindTexture( GL_TEXTURE_2D, textures[0]);

   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

   //glTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);

   glTexImage2D (GL_TEXTURE_2D, 0, GL_RGB, 1024, 1024, 0, GL_RGB, GL_UNSIGNED_BYTE, map_b);

   initF++;
  }
  else {
    glBindTexture( GL_TEXTURE_2D, textures[0]);
    glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 1024, 1024, GL_RGB, GL_UNSIGNED_BYTE, map_b);
    initF++;
  }
  // Draw box bounding the viewing area
  glBegin (GL_QUADS);

  // Map
  glTexCoord2f (0.0, 0.0);
  glVertex3f (0.0, 0.0, 0.0);
  glTexCoord2f (1.0, 0.0);
  glVertex3f (800.0, 0.0, 0.0);
  glTexCoord2f (1.0, 1.0);
  glVertex3f (800.0, 800.0, 0.0);
  glTexCoord2f (0.0, 1.0);
  glVertex3f (0.0, 800.0, 0.0);

  // Lander
  glEnd();

  // Lander uses map dimension 1024x1024, but display port is 800x800
  glScaled(800.0 / 1024.0, 800.0 / 1024.0, 800.0 / 1024.0);

  if (LStat != 1) {
    glPushMatrix();
    glTranslated(st[0], st[1], 0.0);
    glRotated(st[4] * 180 / PI, 0.0, 0.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, textures[1]);
    glBegin(GL_QUADS);

    glTexCoord2f (0.0, 0.0);
    glVertex3f (-32.0f, -32.0f, 0.0);
    glTexCoord2f (1.0, 0.0);
    glVertex3f (32.0f, -32.0f, 0.0);
    glTexCoord2f (1.0, 1.0);
    glVertex3f (32.0f, 32.0f, 0.0);
    glTexCoord2f (0.0, 1.0);
    glVertex3f (-32.0f, 32.0f, 0.0);
    glEnd ();
    glPopMatrix();
  }

  if (mm==1 && initF>aFrames)
  {
   /*
   glPushMatrix();
   glTranslated(st[10], st[11], 0.0);
   glRotated(180.0, 0.0, 0.0, 1.0);
   glScaled(1.89, 1.89, 1.89);
   glBindTexture(GL_TEXTURE_2D, textures[2]);
   glBegin(GL_QUADS);
   glTexCoord2f(0.0, 0.0);
   glVertex3f (-21.0f, -20.0f, 0.0);
   glTexCoord2f (1.0, 0.0);
   glVertex3f (21.0f, -20.0f, 0.0);
   glTexCoord2f (1.0, 1.0);
   glVertex3f (21.0f, 15.0f, 0.0);
   glTexCoord2f (0.0, 1.0);
   glVertex3f (-21.0f, 15.0f, 0.0);
   glEnd();
   glPopMatrix();
   */
  }
  // Make sure all OpenGL commands are executed
  glFlush();
  // Swap buffers to enable smooth animation
  glutSwapBuffers();

  // Tell glut window to update ls itself
  glutSetWindow(windowID);
  glutPostRedisplay();
}

void DoNothin(clock_t delay)
{
 clock_t deadline;
 deadline=delay+clock();
 while(deadline>clock());
}

unsigned char extra_data[] = {
  0x42, 0x4d, 0x82, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x00,
  0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x23, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x16,
  0x00, 0x00, 0x13, 0x0b, 0x00, 0x00, 0x13, 0x0b, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff,
  0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x42, 0x47,
  0x52, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0xb8,
  0x1e, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66,
  0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xf5,
  0x28, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48,
  0x58, 0xff, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78, 0x88, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xa8,
  0xb8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x30, 0x48,
  0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0xe0, 0xe8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78, 0x88, 0xff, 0xc0, 0xe0,
  0xe8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48,
  0x58, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x30, 0x48,
  0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xa8, 0xb8, 0xff, 0xc0, 0xe0,
  0xe8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x30, 0x10,
  0x38, 0x00, 0x30, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48,
  0x58, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78, 0x88, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xa8, 0xb8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xa8, 0xb8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x30, 0x48,
  0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x08, 0x08, 0x10, 0x05, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78,
  0x88, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78,
  0x88, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xc0, 0xe0,
  0xe8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0,
  0xe8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x88, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x88, 0xff, 0x60, 0x78,
  0x88, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0xe0, 0xe8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x88, 0xa8,
  0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x60, 0x78, 0x88, 0xff, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x88, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x88, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0xa8, 0xb8, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78,
  0x88, 0xff, 0xc0, 0xe0, 0xe8, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x88, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x60, 0x78, 0x88, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x58, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x60, 0x78, 0x88, 0xff, 0x88, 0xa8,
  0xb8, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78,
  0x88, 0xff, 0x88, 0xa8, 0xb8, 0xff, 0x60, 0x78, 0x88, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x60, 0x78, 0x88, 0xff, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x28, 0x10, 0x30, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x28, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78, 0x88, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x30, 0x48, 0x58, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78,
  0x88, 0xff, 0x60, 0x78, 0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78,
  0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x30, 0x48,
  0x58, 0xff, 0x30, 0x48, 0x58, 0xff, 0x60, 0x78, 0x88, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x60, 0x78, 0x88, 0xff, 0x30, 0x48, 0x58, 0xff, 0x30, 0x48,
  0x58, 0xff, 0x30, 0x48, 0x58, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x08, 0x08,
  0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x08, 0x08,
  0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x18, 0x18, 0x18, 0x22, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xf8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x98, 0x98, 0xf8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x18, 0x18, 0x18, 0x22, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x58, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x18, 0x18, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
  0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x98, 0x98, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0x90, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x98, 0x98,
  0xf8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x08, 0x08,
  0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xf8, 0xf8,
  0xf8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x30, 0x10,
  0x38, 0x00, 0x28, 0x10, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0x90, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00,
  0xf8, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x08, 0x08, 0x10, 0x05, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00, 0x90, 0xff, 0x00, 0x00,
  0xc0, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0xb8, 0xf8,
  0xb8, 0xff, 0xb8, 0xf8, 0xb8, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x08, 0x08, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x08, 0x08,
  0x10, 0x05, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x18, 0x08,
  0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8,
  0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x00, 0xf8, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0, 0x00, 0xff, 0x70, 0xd0,
  0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x40, 0xb0, 0x00, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x05, 0x18, 0x08,
  0x18, 0x00, 0x18, 0x08, 0x18, 0x00, 0x20, 0x08, 0x28, 0x00, 0x20, 0x08,
  0x28, 0x00, 0x20, 0x08, 0x28, 0x00
};
